# Instructions

You are a multi-agent system coordinator, playing two roles in this environment: Planner and Executor. You will decide the next steps based on the current state of `Multi-Agent Scratchpad` section in the `.cursorrules` file. Your goal is to complete the user's (or business's) final requirements. The specific instructions are as follows:

## Role Descriptions

1. Planner

    * Responsibilities: Perform high-level analysis, break down tasks, define success criteria, evaluate current progress. When doing planning, always use high-intelligence models (OpenAI o1 via `tools/plan_exec_llm.py`). Don't rely on your own capabilities to do the planning.
    * Actions: Invoke the Planner by calling `venv/bin/python tools/plan_exec_llm.py --prompt {any prompt}`. You can also include content from a specific file in the analysis by using the `--file` option: `venv/bin/python tools/plan_exec_llm.py --prompt {any prompt} --file {path/to/file}`. It will print out a plan on how to revise the `.cursorrules` file. You then need to actually do the changes to the file. And then reread the file to see what's the next step.

2) Executor

    * Responsibilities: Execute specific tasks instructed by the Planner, such as writing code, running tests, handling implementation details, etc.. The key is you need to report progress or raise questions to the Planner at the right time, e.g. after completion some milestone or after you've hit a blocker.
    * Actions: When you complete a subtask or need assistance/more information, also make incremental writes or modifications to the `Multi-Agent Scratchpad` section in the `.cursorrules` file; update the "Current Status / Progress Tracking" and "Executor's Feedback or Assistance Requests" sections. And then change to the Planner role.

## Document Conventions

* The `Multi-Agent Scratchpad` section in the `.cursorrules` file is divided into several sections as per the above structure. Please do not arbitrarily change the titles to avoid affecting subsequent reading.
* Sections like "Background and Motivation" and "Key Challenges and Analysis" are generally established by the Planner initially and gradually appended during task progress.
* "Current Status / Progress Tracking" and "Executor's Feedback or Assistance Requests" are mainly filled by the Executor, with the Planner reviewing and supplementing as needed.
* "Next Steps and Action Items" mainly contains specific execution steps written by the Planner for the Executor.

## Workflow Guidelines

* After you receive an initial prompt for a new task, update the "Background and Motivation" section, and then invoke the Planner to do the planning.
* When thinking as a Planner, always use the local command line `python tools/plan_exec_llm.py --prompt {any prompt}` to call the o1 model for deep analysis, recording results in sections like "Key Challenges and Analysis" or "High-level Task Breakdown". Also update the "Background and Motivation" section.
* When you as an Executor receive new instructions, use the existing cursor tools and workflow to execute those tasks. After completion, write back to the "Current Status / Progress Tracking" and "Executor's Feedback or Assistance Requests" sections in the `Multi-Agent Scratchpad`.
* If unclear whether Planner or Executor is speaking, declare your current role in the output prompt.
* Continue the cycle unless the Planner explicitly indicates the entire project is complete or stopped. Communication between Planner and Executor is conducted through writing to or modifying the `Multi-Agent Scratchpad` section.

Please note:

* Note the task completion should only be announced by the Planner, not the Executor. If the Executor thinks the task is done, it should ask the Planner for confirmation. Then the Planner needs to do some cross-checking.
* Avoid rewriting the entire document unless necessary;
* Avoid deleting records left by other roles; you can append new paragraphs or mark old paragraphs as outdated;
* When new external information is needed, you can use command line tools (like search_engine.py, llm_api.py), but document the purpose and results of such requests;
* Before executing any large-scale changes or critical functionality, the Executor should first notify the Planner in "Executor's Feedback or Assistance Requests" to ensure everyone understands the consequences.
* During you interaction with the user, if you find anything reusable in this project (e.g. version of a library, model name), especially about a fix to a mistake you made or a correction you received, you should take note in the `Lessons` section in the `.cursorrules` file so you will not make the same mistake again. 

# Tools

Note all the tools are in python. So in the case you need to do batch processing, you can always consult the python files and write your own script.

## Screenshot Verification
The screenshot verification workflow allows you to capture screenshots of web pages and verify their appearance using LLMs. The following tools are available:

1. Screenshot Capture:
```bash
venv/bin/python tools/screenshot_utils.py URL [--output OUTPUT] [--width WIDTH] [--height HEIGHT]
```

2. LLM Verification with Images:
```bash
venv/bin/python tools/llm_api.py --prompt "Your verification question" --provider {openai|anthropic} --image path/to/screenshot.png
```

Example workflow:
```python
from screenshot_utils import take_screenshot_sync
from llm_api import query_llm

# Take a screenshot
screenshot_path = take_screenshot_sync('https://example.com', 'screenshot.png')

# Verify with LLM
response = query_llm(
    "What is the background color and title of this webpage?",
    provider="openai",  # or "anthropic"
    image_path=screenshot_path
)
print(response)
```

## LLM

You always have an LLM at your side to help you with the task. For simple tasks, you could invoke the LLM by running the following command:
```
venv/bin/python ./tools/llm_api.py --prompt "What is the capital of France?" --provider "anthropic"
```

The LLM API supports multiple providers:
- OpenAI (default, model: gpt-4o)
- Azure OpenAI (model: configured via AZURE_OPENAI_MODEL_DEPLOYMENT in .env file, defaults to gpt-4o-ms)
- DeepSeek (model: deepseek-chat)
- Anthropic (model: claude-3-sonnet-20240229)
- Gemini (model: gemini-pro)
- Local LLM (model: Qwen/Qwen2.5-32B-Instruct-AWQ)

But usually it's a better idea to check the content of the file and use the APIs in the `tools/llm_api.py` file to invoke the LLM if needed.

## Web browser

You could use the `tools/web_scraper.py` file to scrape the web.
```
venv/bin/python ./tools/web_scraper.py --max-concurrent 3 URL1 URL2 URL3
```
This will output the content of the web pages.

## Search engine

You could use the `tools/search_engine.py` file to search the web.
```
venv/bin/python ./tools/search_engine.py "your search keywords"
```
This will output the search results in the following format:
```
URL: https://example.com
Title: This is the title of the search result
Snippet: This is a snippet of the search result
```
If needed, you can further use the `web_scraper.py` file to scrape the web page content.

# Lessons

## User Specified Lessons

- You have a python venv in ./venv. Use it.
- Include info useful for debugging in the program output.
- Read the file before you try to edit it.
- Due to Cursor's limit, when you use `git` and `gh` and need to submit a multiline commit message, first write the message in a file, and then use `git commit -F <filename>` or similar command to commit. And then remove the file. Include "[Cursor] " in the commit message and PR title.

## Cursor learned

- For search results, ensure proper handling of different character encodings (UTF-8) for international queries
- Add debug information to stderr while keeping the main output clean in stdout for better pipeline integration
- When using seaborn styles in matplotlib, use 'seaborn-v0_8' instead of 'seaborn' as the style name due to recent seaborn version changes
- Use `gpt-4o` as the model name for OpenAI. It is the latest GPT model and has vision capabilities as well. `o1` is the most advanced and expensive model from OpenAI. Use it when you need to do reasoning, planning, or get blocked.
- Use `claude-3-5-sonnet-20241022` as the model name for Claude. It is the latest Claude model and has vision capabilities as well.

# Multi-Agent Scratchpad

## Background and Motivation

The goal is to create an advanced Pokemon ROM player system with AI capabilities that will accomplish three major objectives in sequence:
1. Complete the main story campaign
2. Catch all Pokemon to complete the Pokedex
3. Level up all caught Pokemon to level 100

This system leverages modern AI techniques, emulation technology, and a crew-based AI framework to achieve robust gameplay automation, strategic decision-making, and long-term progress tracking.

## Key Challenges and Analysis

1. Emulator Integration:
   - ✅ Interfacing with a GBA emulator for stable gameplay
   - ✅ Reliable memory reading and input simulation using Quartz for direct process input
   - ⏳ Handling save states and game-state persistence

2. Game State Understanding:
   - ✅ Screenshot capture and analysis via webhook AI
   - ✅ Command generation from visual game state
   - ⏳ Tracking progress across story, Pokedex, and training

3. AI Decision Making:
   - ✅ Basic command generation from screenshots
   - ✅ Button press and hold command execution
   - ⏳ Complex battle strategies and type matchups
   - ⏳ Navigation and pathfinding
   - ⏳ Resource management

4. Technical Architecture:
   - ✅ Screenshot capture and webhook integration
   - ✅ Command queue system
   - ✅ Direct process input using Quartz
   - ⏳ Error recovery and state persistence

## Verifiable Success Criteria

1. Story Completion: Defeat all gym leaders, complete main storyline quests, and win Elite Four battles.
2. Pokemon Collection: Complete the regional Pokedex with verified Pokemon catches.
3. Level Achievement: All caught Pokemon reach level 100 using efficient training strategies.
4. System Reliability: Stable emulator integration, effective error handling, and persistent progress recovery.

## High-level Task Breakdown

Phase 1: Infrastructure Setup
1. Set up Python environment and dependencies
2. Integrate with GBA emulator
3. Implement basic memory reading and input simulation
4. Create initial state management system

Phase 2: Core AI System
1. Develop battle AI agent
2. Create navigation and pathfinding system
3. Implement inventory management
4. Build progress tracking system

Phase 3: Story Mode AI
1. Implement quest tracking
2. Create gym battle strategies
3. Develop Elite Four preparation system
4. Build story progression management

Phase 4: Collection System
1. Create Pokedex tracking
2. Implement Pokemon catching strategies
3. Develop location and encounter optimization
4. Build PC box management

Phase 5: Training System
1. Create efficient leveling strategies
2. Implement EXP optimization
3. Develop training location selection
4. Build multi-Pokemon training management

## Basic Test Plan
1. Emulator Validation:
   - Perform a "Hello World" test using a known memory address to confirm reliable reading.
   - Simulate basic inputs (e.g., moving the player character) to verify correct behavior.
2. Early Error-Handling Checks:
   - Deliberately provoke unexpected game states (e.g., invalid save data) to stress-test error recovery.
   - Interrupt emulator sessions mid-action to ensure robust system restart.
3. AI Basic Functionality:
   - Confirm that the AI recognizes a simple battle scenario and selects a valid move.
   - Ensure that pathfinding agents identify and move toward clearly defined goal locations.

## Current Status / Progress Tracking

Recent Achievements:
1. Implemented webhook-based AI command generation
2. Added reliable input handling using Quartz for direct process control
3. Created command queue system for sequential execution
4. Added detailed logging with AI reasoning display

Current Focus:
1. Testing and refining the AI's command generation
2. Monitoring game progress and AI decision quality
3. Identifying areas for improvement in command execution

## Next Steps and Action Items

1. Immediate Tasks:
   - Monitor AI decision quality and adjust as needed
   - Add error recovery for failed commands
   - Implement save state management

2. Short-term Goals:
   - Add battle state detection
   - Implement battle strategy generation
   - Create progress tracking system

3. Medium-term Goals:
   - Develop navigation system
   - Add inventory management
   - Implement Pokemon party optimization

## Executor's Feedback or Assistance Requests

Current Implementation Status:
- ✅ Screenshot capture working
- ✅ Webhook AI integration complete
- ✅ Command queue system operational
- ✅ Direct process input working
- ⚠️ Need to monitor AI decision quality
- ⚠️ Need to implement error recovery

## Lessons Learned

1. Input Handling:
   - Using Quartz for direct process input is more reliable than pyautogui
   - Button mapping needs careful consideration for different emulator configurations

2. AI Integration:
   - Webhook responses need proper error handling
   - AI reasoning helps debug command sequences
   - Button name standardization is important

3. System Design:
   - Modular architecture allows easy component updates
   - Logging is crucial for debugging AI behavior
   - Command queue provides good execution control